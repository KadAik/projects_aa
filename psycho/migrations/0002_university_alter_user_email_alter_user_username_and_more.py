# Generated by Django 5.2.6 on 2025-10-17 09:53

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import psycho.models
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("psycho", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="University",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=99, verbose_name="The university name"),
                ),
            ],
            options={
                "verbose_name_plural": "Universities",
            },
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=models.EmailField(
                db_index=True,
                help_text="Email address of the user",
                max_length=100,
                unique=True,
                verbose_name="email address",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="username",
            field=models.CharField(
                error_messages={
                    "blank": "Username cannot be empty.",
                    "unique": "This username is already taken.",
                },
                max_length=150,
                unique=True,
            ),
        ),
        migrations.CreateModel(
            name="AdminProfile",
            fields=[
                (
                    "admin_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the admin",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="Admin's first name",
                        max_length=100,
                        verbose_name="admin first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Admin's last name",
                        max_length=100,
                        verbose_name="admin last name",
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "blank": "An email address is required.",
                            "unique": "This email address is already taken.",
                        },
                        help_text="Admin's email address",
                        max_length=100,
                        unique=True,
                        verbose_name="admin email",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="Admin's phone number",
                        max_length=128,
                        region="BJ",
                        unique=True,
                        verbose_name="Admin phone number",
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date at which the admin creates its profile",
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date at which the admin updates its profile",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(models.Model, psycho.models.NormalizeFieldsMixin),
        ),
        migrations.CreateModel(
            name="ApplicantProfile",
            fields=[
                (
                    "applicant_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the applicant",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="ApplicantProfile's first name",
                        max_length=100,
                        verbose_name="applicant first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="ApplicantProfile's last name",
                        max_length=100,
                        verbose_name="applicant last name",
                    ),
                ),
                ("date_of_birth", models.DateField()),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=1
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="ApplicantProfile's email address",
                        max_length=100,
                        unique=True,
                        verbose_name="applicant email",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        db_index=True,
                        help_text="ApplicantProfile's phone number",
                        max_length=128,
                        region="BJ",
                        unique=True,
                        verbose_name="Applicant phone number",
                    ),
                ),
                (
                    "date_registered",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date at which the applicant creates its profile",
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date at which the applicant updates its profile",
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[
                            ("HIGHSCHOOL", "High School"),
                            ("BACHELOR", "Bachelor"),
                            ("MASTER", "Master"),
                            ("PHD", "Phd"),
                        ],
                        max_length=20,
                        verbose_name="The applicant highest study degree",
                    ),
                ),
                (
                    "baccalaureate_series",
                    models.CharField(
                        choices=[
                            ("D", "BAC D"),
                            ("C", "BAC C"),
                            ("E", "BAC E"),
                            ("F", "BAC F"),
                        ],
                        max_length=2,
                        verbose_name="The type of baccalaureate",
                    ),
                ),
                (
                    "baccalaureate_average",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                        verbose_name="Average at baccalaureate exam",
                    ),
                ),
                (
                    "baccalaureate_session",
                    models.DateField(verbose_name="Baccalaureate session"),
                ),
                (
                    "university_field_of_study",
                    models.CharField(
                        blank=True, max_length=99, null=True, verbose_name="Study field"
                    ),
                ),
                (
                    "university_average",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                        verbose_name="Average for the university degree",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="applicant_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "university",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graduates",
                        to="psycho.university",
                    ),
                ),
            ],
            options={
                "ordering": ["-date_registered"],
            },
            bases=(models.Model, psycho.models.NormalizeFieldsMixin),
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "application_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the application",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date_submitted", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "tracking_id",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        null=True,
                        unique=True,
                        verbose_name="A human-readable reference to track the application",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Accepted", "Accepted"),
                            ("Rejected", "Rejected"),
                            ("Incomplete", "Incomplete"),
                        ],
                        default="Pending",
                        help_text="Status of the application",
                        max_length=20,
                    ),
                ),
                (
                    "applicant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="application",
                        to="psycho.applicantprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application",
                "verbose_name_plural": "Applications",
                "ordering": ["date_submitted"],
            },
        ),
        migrations.CreateModel(
            name="ApplicationStatusHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "old_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Pending", "Pending"),
                            ("Accepted", "Accepted"),
                            ("Rejected", "Rejected"),
                            ("Incomplete", "Incomplete"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status before change",
                    ),
                ),
                (
                    "new_status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("Accepted", "Accepted"),
                            ("Rejected", "Rejected"),
                            ("Incomplete", "Incomplete"),
                        ],
                        max_length=20,
                        verbose_name="Status after change",
                    ),
                ),
                ("date_changed", models.DateTimeField(auto_now_add=True)),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Optional comment about the change",
                        null=True,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_history",
                        to="psycho.application",
                    ),
                ),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who made the change",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Application status histories",
                "ordering": ["-date_changed"],
            },
        ),
        migrations.CreateModel(
            name="HRManagerProfile",
            fields=[
                (
                    "manager_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the HR manager",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="HR manager's first name",
                        max_length=100,
                        verbose_name="HR manager first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="HR manager's last name",
                        max_length=100,
                        verbose_name="HR manager last name",
                    ),
                ),
                ("date_of_birth", models.DateField()),
                (
                    "email",
                    models.EmailField(
                        help_text="HR manager's email address",
                        max_length=100,
                        unique=True,
                        verbose_name="HR manager email",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        help_text="HR manager's phone number",
                        max_length=128,
                        region="BJ",
                        unique=True,
                        verbose_name="HR manager phone number",
                    ),
                ),
                (
                    "date_registered",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date at which the HR manager creates its profile",
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date at which the HR manager updates its profile",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hr_manager_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "HR Manager",
                "ordering": ["last_name"],
                "permissions": [
                    ("can_review_applications", "Can review applications"),
                    (
                        "can_manage_applicants_profiles",
                        "Can manage applicants profiles",
                    ),
                    ("can_manage_applications", "Can manage applications"),
                ],
            },
            bases=(models.Model, psycho.models.NormalizeFieldsMixin),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "review_id",
                    models.AutoField(
                        editable=False,
                        help_text="Unique identifier for the review",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date_reviewed", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "comments",
                    models.TextField(
                        help_text="Comments from the HR manager about the application"
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        help_text="Application being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="psycho.application",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="HR manager who reviewed the application",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="psycho.hrmanagerprofile",
                        verbose_name="reviewer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalApplicantProfile",
            fields=[
                (
                    "applicant_id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the applicant",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="ApplicantProfile's first name",
                        max_length=100,
                        verbose_name="applicant first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="ApplicantProfile's last name",
                        max_length=100,
                        verbose_name="applicant last name",
                    ),
                ),
                ("date_of_birth", models.DateField()),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=1
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="ApplicantProfile's email address",
                        max_length=100,
                        verbose_name="applicant email",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        db_index=True,
                        help_text="ApplicantProfile's phone number",
                        max_length=128,
                        region="BJ",
                        verbose_name="Applicant phone number",
                    ),
                ),
                (
                    "date_registered",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date at which the applicant creates its profile",
                    ),
                ),
                (
                    "date_updated",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date at which the applicant updates its profile",
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[
                            ("HIGHSCHOOL", "High School"),
                            ("BACHELOR", "Bachelor"),
                            ("MASTER", "Master"),
                            ("PHD", "Phd"),
                        ],
                        max_length=20,
                        verbose_name="The applicant highest study degree",
                    ),
                ),
                (
                    "baccalaureate_series",
                    models.CharField(
                        choices=[
                            ("D", "BAC D"),
                            ("C", "BAC C"),
                            ("E", "BAC E"),
                            ("F", "BAC F"),
                        ],
                        max_length=2,
                        verbose_name="The type of baccalaureate",
                    ),
                ),
                (
                    "baccalaureate_average",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                        verbose_name="Average at baccalaureate exam",
                    ),
                ),
                (
                    "baccalaureate_session",
                    models.DateField(verbose_name="Baccalaureate session"),
                ),
                (
                    "university_field_of_study",
                    models.CharField(
                        blank=True, max_length=99, null=True, verbose_name="Study field"
                    ),
                ),
                (
                    "university_average",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                        verbose_name="Average for the university degree",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "university",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="psycho.university",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical applicant profile",
                "verbose_name_plural": "historical applicant profiles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.DeleteModel(
            name="Applicant",
        ),
        migrations.AddConstraint(
            model_name="hrmanagerprofile",
            constraint=models.UniqueConstraint(
                fields=("last_name", "date_of_birth"),
                name="manager_unique_lower_last_name_date_of_birth",
                violation_error_message="The HR manager already exists.",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicantprofile",
            constraint=models.UniqueConstraint(
                fields=("last_name", "date_of_birth"),
                name="applicant_unique_lower_last_name_date_of_birth",
                violation_error_message="The applicant already exists.",
            ),
        ),
    ]
